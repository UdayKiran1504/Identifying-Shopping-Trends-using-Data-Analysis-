# -*- coding: utf-8 -*-
"""Identifying Shopping Trends using Data Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g_hxSGhMCH1KxmN24QRWBm2aNi-y3DN1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from statsmodels.tsa.arima.model import ARIMA
import warnings

# Load dataset
data = pd.read_excel("/content/shopping_trends_updated.xlsx")

# Display basic information
print(data.info())
print(data.describe())

data.head() # Call head() on the 'data' DataFrame instead of 'shop'

# Group data by category and calculate the average purchase amount
average_purchase_by_category = data.groupby('Category')['Purchase Amount (USD)'].mean()

# Display the result
average_purchase_by_category

# Group data by category and item, then count occurrences
most_purchased_by_category = data.groupby('Category')['Item Purchased'].agg(lambda x: x.value_counts().index[0])

# Display the result
most_purchased_by_category

# Analyze subscription status and purchase amount
subscription_analysis = data.groupby('Subscription Status')['Purchase Amount (USD)'].agg(['mean', 'median', 'sum', 'count'])
print(subscription_analysis)

# Visualize the relationship between subscription status and purchase amount
plt.figure(figsize=(8, 6))
sns.boxplot(x='Subscription Status', y='Purchase Amount (USD)', data=data)
plt.title('Purchase Amount Distribution by Subscription Status')
plt.show()

# Analyze the relationship between gender and purchased items
gender_item_analysis = data.groupby('Gender')['Item Purchased'].value_counts().unstack(fill_value=0)

# Display the result
print(gender_item_analysis)

# Visualize the relationship between gender and purchased items
plt.figure(figsize=(12, 6))
gender_item_analysis.plot(kind='bar', stacked=True)
plt.title('Item Purchased by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Purchases')
plt.xticks(rotation=0)
plt.legend(title='Item Purchased', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Analyze the relationship between age and category
age_category_analysis = data.groupby('Age')['Category'].value_counts().unstack(fill_value=0)

# Display the result
print(age_category_analysis)

# Visualize the relationship between age and category
plt.figure(figsize=(12, 6))
age_category_analysis.plot(kind='bar', stacked=True)
plt.title('Category Purchased by Age')
plt.xlabel('Age')
plt.ylabel('Number of Purchases')
plt.xticks(rotation=45)
plt.legend(title='Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Find the highest purchased category
highest_purchased_category = data.groupby('Category')['Purchase Amount (USD)'].sum().idxmax()
print(f"Highest Purchased Category: {highest_purchased_category}")

# Find the location with the highest total purchase amount
highest_purchase_location = data.groupby('Location')['Purchase Amount (USD)'].sum().idxmax()
print(f"Location with Highest Total Purchase Amount: {highest_purchase_location}")

# Count the occurrences of each payment method
payment_method_counts = data['Payment Method'].value_counts()

# Get the most popular payment method
most_popular_payment = payment_method_counts.index[0]

# Print the result
print(f"The most popular payment method is: {most_popular_payment}")

# Calculate the mean purchase amount for each payment method
payment_method_means = data.groupby('Payment Method')['Purchase Amount (USD)'].mean()

# Print the result
print(payment_method_means)

# Calculate the number of purchases for each payment method
payment_method_counts = data['Payment Method'].value_counts()

# Print the result
payment_method_counts

# Calculate the purchase frequency for each age group
age_purchase_frequency = data.groupby('Age')['Purchase Amount (USD)'].count()

# Print the result
print(age_purchase_frequency)

# Visualize the purchase frequency distribution across age groups
plt.figure(figsize=(10, 6))
sns.histplot(data['Age'], bins=10, kde=True)  # Adjust the number of bins as needed
plt.title('Purchase Frequency Distribution Across Age Groups')
plt.xlabel('Age')
plt.ylabel('Number of Purchases')
plt.show()


#Further analysis (optional):

#Group by age range for a more comprehensive analysis:
# Define age bins
bins = [10, 20, 30, 40, 50, 60, 70, 80, float('inf')]
labels = ['10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80+']

# Create age group column
data['Age Group'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

# Calculate purchase frequency by age group
age_group_purchase_frequency = data.groupby('Age Group')['Purchase Amount (USD)'].count()
print(age_group_purchase_frequency)

# Visualize purchase frequency by age group
plt.figure(figsize=(12, 6))
sns.barplot(x=age_group_purchase_frequency.index, y=age_group_purchase_frequency.values)
plt.title('Purchase Frequency by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Purchases')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# ... (Your previous code) ...

# Assuming your data is in 'data' DataFrame
# Perform K-Means clustering (replace with your actual features)
kmeans = KMeans(n_clusters=3, random_state=42)
data['Cluster'] = kmeans.fit_predict(data[['Purchase Amount (USD)', 'Age']])

# Create customer_data
customer_data = data

# Pie Chart of Customer Clusters
plt.figure(figsize=(8, 8))
customer_data["Cluster"].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=["blue", "orange", "green"], startangle=90)
plt.title("Customer Segmentation Distribution")
plt.ylabel("")
plt.show()

# Forecast Next 30 Days
forecast = model_fit.forecast(steps=30)
plt.figure(figsize=(12,6))
sales_data.plot(label="Actual Sales", color='blue')
forecast.plot(label="Forecast", linestyle="dashed", color='red')
plt.title("Sales Forecast for Next 30 Days")
plt.xlabel("Date")
plt.ylabel("Total Spend")
plt.legend()
plt.show()

# Analyze preferred shipping method by product category
shipping_preference = data.groupby('Category')['Shipping Type'].agg(lambda x: x.value_counts().index[0])

# Display the result
shipping_preference

#Are there any correlations between the size of the product and the purchase amount?

# Check for missing values in relevant columns
print(data[['Size', 'Purchase Amount (USD)']].isnull().sum())

# Remove rows with missing values in 'Size' or 'Purchase Amount (USD)'
data_cleaned = data.dropna(subset=['Size', 'Purchase Amount (USD)'])

# Convert 'Size' column to numerical representation using mapping (e.g., S=1, M=2, L=3, XL=4)
size_mapping = {'S': 1, 'M': 2, 'L': 3, 'XL': 4}  # Adjust mapping as needed
data_cleaned['Size_Numeric'] = data_cleaned['Size'].map(size_mapping)

# Calculate the correlation using the numeric representation of 'Size'
correlation = data_cleaned['Size_Numeric'].corr(data_cleaned['Purchase Amount (USD)'])
print(f"Correlation between product size and purchase amount: {correlation}")

# Visualize the relationship (optional)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Size_Numeric', y='Purchase Amount (USD)', data=data_cleaned)  # Use 'Size_Numeric'
plt.title('Relationship between Product Size and Purchase Amount')
plt.xlabel('Product Size (Numeric)')  # Update x-axis label
plt.ylabel('Purchase Amount (USD)')
plt.show()